version: '3.8'

services:
  # 统一 vLLM 服务
  vllm-unified:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DOWNLOAD_MODELS: "true"
    image: knowflow/vllm-unified:latest
    container_name: vllm-unified
    restart: unless-stopped
    ports:
      - "8000:8000"  # 路由服务
      - "8001:8001"  # Chat 模型
      - "8002:8002"  # Embedding 模型
      - "8003:8003"  # Rerank 模型
    volumes:
      - vllm_models:/app/models
      - vllm_cache:/app/cache
      - vllm_logs:/app/logs
      - ./config:/app/config:ro
    environment:
      # GPU 配置
      - CUDA_VISIBLE_DEVICES=0,1
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      
      # vLLM 配置
      - VLLM_WORKER_MULTIPROC_METHOD=spawn
      - VLLM_LOGGING_LEVEL=INFO
      - VLLM_HOST_IP=0.0.0.0
      
      # Hugging Face 配置
      - HF_HOME=/app/cache/huggingface
      - TRANSFORMERS_CACHE=/app/cache/transformers
      - HF_HUB_CACHE=/app/cache/hub
      - HF_TOKEN=${HF_TOKEN:-}
      
      # 系统配置
      - PYTHONUNBUFFERED=1
      - TOKENIZERS_PARALLELISM=false
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 2
              capabilities: [gpu]
        limits:
          memory: 32G
    networks:
      - vllm-network
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 300s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Nginx 反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: vllm-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - vllm-unified
    networks:
      - vllm-network
    profiles:
      - nginx

  # 监控服务（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: vllm-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - vllm-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: vllm-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - vllm-network
    profiles:
      - monitoring

volumes:
  vllm_models:
    driver: local
  vllm_cache:
    driver: local
  vllm_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  vllm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16